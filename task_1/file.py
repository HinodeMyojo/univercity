from functools import reduce
from math import sqrt
# opt.6: 7YES, 10YES, 1YES, 11~YES, 12
# opt.5: 6, 7YES, 2, 11, 12


# 1
def quadratic():
    """
        Функция для вычисления корней квадратного уравнения
    """
    inp = input('Введите корни квадратного уравнения через пробел: ')
    lst = list(map(int, inp.split()))
    A, B, C = lst
    discriminant = B ** 2 - 4 * A * C
    if discriminant > 0:
        x1 = (-B + sqrt(discriminant)) / (2 * A)
        x2 = (-B - sqrt(discriminant)) / (2 * A)
        return (f'Первый корень равен: {x1}' + '/n'
                f'Второй корень равен: {x2}')
    elif discriminant == 0:
        x = -B / (2 * A)
        return f'Корень равен: {x}'
    else:
        return 'Корней нет'


# 7
def mult_even_and_summ_odd():
    numb = input('Введите 5 чисел через пробел: ')
    numbers = list(map(int, numb.split()))
    if len(numbers) != 5:
        raise Exception('Чисел должно быть пять!')
    even = [i for i in numbers if i % 2 == 0]
    odd = [i for i in numbers if i % 2 != 0]
    return (f'Произведение четных чисел: {reduce(lambda x,y: x*y, even)}' + '\n'
            f'Сумма нечетных чисел равна: {sum(odd)}')


# 10
def rules():
    numb = input('Введите 5 чисел через пробел: ')
    numbers = list(map(int, numb.split()))
    if len(numbers) != 5:
        raise Exception('Чисел должно быть пять!')
    even = [str(i) for i in numbers if i % 2 == 0]
    odd = [i for i in numbers if i % 2 != 0]
    return (f'По правилу сложения строк: {"".join(even)}' + '\n'
            f'По правилу сложения чисел: {sum(odd)}')


# 11
def power_voltage():
    U1 = 400
    S1 = complex(1000, 500)
    R = 0.5
    X = 1.0
    I = S1.real / U1
    Z = complex(R, X)
    DeltaU = I * Z
    U2 = U1 - DeltaU
    S2 = I * U2.conjugate()
    return (f'Ток в начале линии: {I} А' + '\n'
            f'Падение напряжения на линии: {DeltaU} В' + '\n'
            f'Напряжение на конце линии: {U2} В' + '\n'
            f'Мощность в конце линии: {S2} ВА')

#12
def trans_replacement():
    S = float(input("Введите номинальную мощность в МВА: "))
    Uh, Um, Ul = list(map(float, input(
                "Введите номиналы высшего, среднего, низжего напряжений через пробел в кВ: "
                ).split()))
    uh, um, ul = list(map(float, input(
                "Введите номиналы высшего, среднего, низжего напряжений короткого замыкания (uk) через пробел в процентах: "
                ).split()))
    Pk = float(input("Введите потери мощности при коротком замыкании Pk в кВт: ")) / 1000
    Px = float(input("Введите потери мощности при холостом ходе Px в кВт: ")) / 1000
    ixx = float(input("Введите ток первичной обмотки при холостом ходе трансформатора в %: "))
    SquaredU = pow(Uh, 2)

    # Коэффициент трансформации
    KTR = Uh/Um/Ul
    # Активная поперечная проводимост
    GT = Px/(SquaredU)
    # Реактивная поперечная проводимость
    BT = (ixx*S)/(100*SquaredU)
    # Реактивное сопротивление, приведённое к сопротивлению высшей стороны, рассчитываем с помощью пересчёта напряжений
    ukh = (um+uh-ul)/2
    ukm = (ul+uh-um)/2
    ukl = (um+ul-uh)/2
    # При данном расчёте одно из напряжений может получиться отрицательным (напряжение u_(к Н) было близко к этому),
    # в таком случае мы продолжаем рассчитывать реактивное сопротивление как обычно, но для этой обмотки оно получится меньше нуля.
    # Это возможно, так как физически точки электрического
    # соединения всех обмоток не существует, и мы можем измерять только сопротивление сразу двух обмоток одновременно (например, сопротивление цепи высшее-среднее).
    Xh = (ukh*SquaredU)/(100*S)
    Xm = (ukm*SquaredU)/(100*S)
    Xl = (ukl*SquaredU)/(100*S)
    # Активное сопротивление, приведённое к сопротивлению высшей стороны. 
    Rhl = (Pk*SquaredU)/(pow(S, 2))
    Rh = Rhl/2
    return (f"----------------------------------------------------------------" + "\n"
            f"Заданы следующие данные:" + "\n"
            f"Sном: {S} МВА, Uвн: {Uh} кВ, Uсн: {Um} кВ, Uнн: {Ul} кВ" + "\n"
            f"uк В-С: {uh} %, uк В-Н: {um} %, uк С-Н: {ul} %" + "\n"
            f"ΔPкз: {Pk} МВт, ixx: {ixx} %, ΔPхх: {Px} МВт" + "\n"
            f"Определены следующие данные:" + "\n"
            f"Коэффициент трансформации (kтр): {round(KTR, 4)}" + "\n"
            f"Активная поперечная проводимость (Gт): {round((GT*1000000), 4)} *10^-6 См." + "\n"
            f"Реактивная поперечная проводимость (Bт): {round((BT*1000000), 4)} *10^-6 См." + "\n"
            f"Реактивное сопротивление, приведённое к сопротивлению высшей стороны (ukВ, ukС, ukН): {ukh} %, {ukm} %, {ukl} %" + "\n"
            f"Активное сопротивление, приведённое к сопротивлению высшей стороны. (RВ-Н, RН): {round(Rhl, 4)} Ом, {round(Rh, 4)} Ом"
            )
    
print(trans_replacement())